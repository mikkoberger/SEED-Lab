#include <Encoder.h>
#include <Wire.h>

#define SLAVE_ADDRESS 0x04
// Defining general variables and designating voltage pins
int voltagePin = 9;
int pwmOutput;
int enablePin = 4;
int Direction = 7;
double sampleRate = 0.05;
double Delay = sampleRate * 1000;
double ki = 0.65;//0.07;//5.715; //39.2786869994445; //16;
double kp = 1.2; //0.7;//4.75; //14.7576110544375; //12;
double kd = 0.07; //1.2;//.53; //0.967168289862824; // 0.7;
double thetaNew;
double thetaDesired = 0;
int received_int;
int thetaSend;
int dummy;

// Defining varaibles for discreet PID controller
unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output, setPoint;
double cumError, rateError;
Encoder encoder(3, 6); // Creating Encoder object from encoder class

void setup() {
  Serial.begin(9600); // Baud Rate
  // Defining output pins, turning motor on and setting direction of rotation
  pinMode(enablePin, OUTPUT);
  digitalWrite(enablePin, HIGH);
  pinMode(voltagePin, OUTPUT);
  pinMode(Direction, OUTPUT);
  digitalWrite(Direction, LOW);

  // Pi I2C stuff
  pinMode(13, OUTPUT);
  Wire.begin(SLAVE_ADDRESS);
  
}


void loop() {
  Wire.onReceive(receiveData); // Recieve quadrant from Computer Vision
  thetaNew = (6.2832/3200)*encoder.read(); // Store current encoder reading in thetaNew in radians
  dummy = encoder.read(); //Checking encoder reading
  // Case statement for quadrant and update thetaDesired based upon quadrant to go to
  if(received_int == 1){
    thetaDesired = 1.57;
  }else if(received_int == 2){
    thetaDesired = 3.14;
  }else if(received_int == 3){
    thetaDesired = 4.71;
  }else if(received_int == 4){
    thetaDesired = 6.28;
  }
  pwmOutput = (255/8)*PIDmotorcontroller(thetaNew); // Convert output voltage to PWM
  delay(Delay); // Delay in between next reading and loop
  analogWrite(voltagePin, pwmOutput); // Write value to voltage pin going to motor
  Wire.onRequest(sendData); // Send back current theta reading to Pi
}



double PIDmotorcontroller(double thetaNew){
    double out; // Create output voltage
    currentTime = millis(); // Amount of time elapsed since program start
    elapsedTime = (double)(currentTime - previousTime)/1000; // Elapsed time since last loop execution
    error = (thetaDesired - thetaNew); // Calculate error in angular position of wheel

    cumError += (error * elapsedTime); // Calculate integral term for discrete system
    rateError = (error - lastError) / elapsedTime; // Calculate derivative term for discrete system
    out = (kp * error) + (ki * cumError) + (kd * rateError); // Calculate output voltage to send to motor

    // Change direction of wheel if sign of out flips
    if(out > 0){
      digitalWrite(Direction, HIGH);
    } else{
      digitalWrite(Direction, LOW);
    }

    // If output voltage is greater than 8 volts, reset to 8 volts
    out = abs(out);
    if(out > 8){
      out = 8;
    }
    
    // Update last error and previous time
    lastError = error;
    previousTime = currentTime;

    return out;
 
}

// Function to recieve quadrant info from Computer Vision and store in received_int
void receiveData(){
  while(Wire.available()){
    received_int = Wire.read();
    Serial.print(received_int);
  }
}

// Send most up to date position back to Pi to display on LCD screen
void sendData(){
  //Wire.beginTransmission(SLAVE_ADDRESS);
  thetaSend = int(10*thetaNew); // Accurate up to the tenth of a radian
  Wire.write(thetaSend); // Sending one byte
  //Wire.endTransmission();
}
